"use strict";(self.webpackChunkaettua_docs=self.webpackChunkaettua_docs||[]).push([[6352],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=i,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6853:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},o="Code of Conduct",l={unversionedId:"code-of-conduct",id:"code-of-conduct",title:"Code of Conduct",description:"Introduction",source:"@site/docs/code-of-conduct.md",sourceDirName:".",slug:"/code-of-conduct",permalink:"/aettua-docs/docs/code-of-conduct",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code-of-conduct.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Website Documentation",permalink:"/aettua-docs/docs/category/website-documentation"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Version Control",id:"version-control",level:2},{value:"Branching Strategy",id:"branching-strategy",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Commit Messages",id:"commit-messages",level:3},{value:"Code Review",id:"code-review",level:2},{value:"Review Process",id:"review-process",level:3},{value:"Acceptance Criteria",id:"acceptance-criteria",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Documentation",id:"documentation",level:2},{value:"Communication",id:"communication",level:2},{value:"Conflict Resolution",id:"conflict-resolution",level:2},{value:"Enforcement",id:"enforcement",level:2},{value:"Amendments",id:"amendments",level:2}],u={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"code-of-conduct"},"Code of Conduct"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This document outlines the Code of Conduct for AETTUA's IT Team. It aims to establish a set of principles and practices to ensure a productive, respectful, and collaborative environment. Adherence to these guidelines is expected from all team members."),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#version-control"},"Version Control"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#branching-strategy"},"Branching Strategy")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#naming-conventions"},"Naming Conventions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#commit-messages"},"Commit Messages")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#code-review"},"Code Review"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#review-process"},"Review Process")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#acceptance-criteria"},"Acceptance Criteria")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#testing"},"Testing"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#unit-tests"},"Unit Tests")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#integration-tests"},"Integration Tests")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#documentation"},"Documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#communication"},"Communication")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#conflict-resolution"},"Conflict Resolution")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#enforcement"},"Enforcement")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#amendments"},"Amendments"))),(0,i.kt)("h2",{id:"version-control"},"Version Control"),(0,i.kt)("h3",{id:"branching-strategy"},"Branching Strategy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Main Branch:")," The ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," branch is the source of truth. All production-ready code resides here."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Development Branch:")," The ",(0,i.kt)("inlineCode",{parentName:"li"},"dev")," branch is where all development merges before being promoted to ",(0,i.kt)("inlineCode",{parentName:"li"},"main"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Feature Branches:")," All new features should be developed in separate branches, branching off from ",(0,i.kt)("inlineCode",{parentName:"li"},"dev"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Hotfix Branches:")," Urgent fixes that need to be applied to the production codebase are made in ",(0,i.kt)("inlineCode",{parentName:"li"},"hotfix")," branches, which are merged directly into ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," and then back-merged into ",(0,i.kt)("inlineCode",{parentName:"li"},"dev"),".")),(0,i.kt)("h3",{id:"naming-conventions"},"Naming Conventions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Branch Names:")," Use a descriptive name for branches, prefixed with the type (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"feature/user-login"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"hotfix/login-bug"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Commit Messages:"),' Use imperative mood, and describe what the commit does (e.g., "Add user authentication system").')),(0,i.kt)("h3",{id:"commit-messages"},"Commit Messages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clearly describe the changes made in the commit."),(0,i.kt)("li",{parentName:"ul"},"Include the ticket or issue number if applicable."),(0,i.kt)("li",{parentName:"ul"},"Keep messages concise and relevant.")),(0,i.kt)("h2",{id:"code-review"},"Code Review"),(0,i.kt)("h3",{id:"review-process"},"Review Process"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Assign at least one reviewer for each merge request."),(0,i.kt)("li",{parentName:"ul"},"Reviewers should provide constructive feedback and approve changes only when they meet the project standards and requirements.")),(0,i.kt)("h3",{id:"acceptance-criteria"},"Acceptance Criteria"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Code meets the project's coding standards and guidelines."),(0,i.kt)("li",{parentName:"ul"},"Documentation is updated to reflect changes."),(0,i.kt)("li",{parentName:"ul"},"Changes are tested (when applicable) and do not introduce new bugs.")),(0,i.kt)("h2",{id:"testing"},"Testing"),(0,i.kt)("h3",{id:"unit-tests"},"Unit Tests"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Write unit tests for all new code and update existing tests as necessary."),(0,i.kt)("li",{parentName:"ul"},"Aim for a high code coverage percentage to ensure reliability.")),(0,i.kt)("h3",{id:"integration-tests"},"Integration Tests"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ensure new features work as expected with the existing system."),(0,i.kt)("li",{parentName:"ul"},"Conduct end-to-end tests for critical workflows.")),(0,i.kt)("h2",{id:"documentation"},"Documentation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Document all features, functions, and algorithms."),(0,i.kt)("li",{parentName:"ul"},"Use clear, concise language and include examples where possible.")),(0,i.kt)("h2",{id:"communication"},"Communication"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Maintain regular communication with team members, especially when working remotely."),(0,i.kt)("li",{parentName:"ul"},"Use the designated channels for project discussions, updates, and questions.")),(0,i.kt)("h2",{id:"conflict-resolution"},"Conflict Resolution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Address conflicts directly with the involved parties."),(0,i.kt)("li",{parentName:"ul"},"Escalate unresolved issues to the team lead or project manager.")),(0,i.kt)("h2",{id:"enforcement"},"Enforcement"),(0,i.kt)("p",null,"Violations of the Code of Conduct may result in warnings, removal from the project, or further disciplinary actions as deemed appropriate by the leadership team."),(0,i.kt)("h2",{id:"amendments"},"Amendments"),(0,i.kt)("p",null,"This Code of Conduct is a living document and may be updated as the project evolves. All team members will be notified of any changes."))}d.isMDXComponent=!0}}]);